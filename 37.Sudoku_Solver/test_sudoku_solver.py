from SudokuSolver import SudokuSolver
from SudokuBoard import SudokuBoard

def test_ValidateRow():
    board = [["5","3",".",".","7",".",".",".","."],
             ["6",".",".","1","9","5",".",".","."],
             [".","9","8",".",".",".",".","6","."],
             ["8",".",".",".","6",".",".",".","3"],
             ["4",".",".","8",".","3",".",".","1"],
             ["7",".",".",".","2",".",".",".","6"],
             [".","6",".",".",".",".","2","8","."],
             [".",".",".","4","1","9",".",".","5"],
             [".",".",".",".","8",".",".","7","9"]]
    solver = SudokuSolver(board)
    assert solver.valid_input_row(0) == [1, 2, 4, 6, 8, 9]

def test_ValidateRow2():
    board = [["5","3",".",".","7",".",".",".","."],
             ["6",".",".","1","9","5",".",".","."],
             [".","9","8",".",".",".",".","6","."],
             ["8",".",".",".","6",".",".",".","3"],
             ["4",".",".","8",".","3",".",".","1"],
             ["7",".",".",".","2",".",".",".","6"],
             [".","6",".",".",".",".","2","8","."],
             [".",".",".","4","1","9",".",".","5"],
             [".",".",".",".","8",".",".","7","9"]]
    solver = SudokuSolver(board)
    assert solver.valid_input_row(2) == [1, 2, 3, 4, 5, 7]

def test_ValidateColumn():
    board = [["5","3",".",".","7",".",".",".","."],
             ["6",".",".","1","9","5",".",".","."],
             [".","9","8",".",".",".",".","6","."],
             ["8",".",".",".","6",".",".",".","3"],
             ["4",".",".","8",".","3",".",".","1"],
             ["7",".",".",".","2",".",".",".","6"],
             [".","6",".",".",".",".","2","8","."],
             [".",".",".","4","1","9",".",".","5"],
             [".",".",".",".","8",".",".","7","9"]]
    solver = SudokuSolver(board)
    assert solver.valid_input_col(8) == [2, 4, 7, 8]

def test_ValidateBox0x0():
    board = [["5","3",".",".","7",".",".",".","."],
             ["6",".",".","1","9","5",".",".","."],
             [".","9","8",".",".",".",".","6","."],
             ["8",".",".",".","6",".",".",".","3"],
             ["4",".",".","8",".","3",".",".","1"],
             ["7",".",".",".","2",".",".",".","6"],
             [".","6",".",".",".",".","2","8","."],
             [".",".",".","4","1","9",".",".","5"],
             [".",".",".",".","8",".",".","7","9"]]
    solver = SudokuSolver(board)
    cell = (1, 1)
    assert solver.valid_input_box(cell) == [1, 2, 4, 7]

def test_ValidateBox0x2():
    board = [["5","3",".",".","7",".",".",".","."],
             ["6",".",".","1","9","5",".",".","."],
             [".","9","8",".",".",".",".","6","."],
             ["8",".",".",".","6",".",".",".","3"],
             ["4",".",".","8",".","3",".",".","1"],
             ["7",".",".",".","2",".",".",".","6"],
             [".","6",".",".",".",".","2","8","."],
             [".",".",".","4","1","9",".",".","5"],
             [".",".",".",".","8",".",".","7","9"]]
    solver = SudokuSolver(board)
    cell = (1, 6)
    assert solver.valid_input_box(cell) == [1, 2, 3, 4, 5, 7, 8, 9]

def test_ValidateCell2x0():
    board = [["5","3",".",".","7",".",".",".","."],
             ["6",".",".","1","9","5",".",".","."],
             [".","9","8",".",".",".",".","6","."],
             ["8",".",".",".","6",".",".",".","3"],
             ["4",".",".","8",".","3",".",".","1"],
             ["7",".",".",".","2",".",".",".","6"],
             [".","6",".",".",".",".","2","8","."],
             [".",".",".","4","1","9",".",".","5"],
             [".",".",".",".","8",".",".","7","9"]]
    solver = SudokuSolver(board)
    cell = (2, 0)
    assert solver.valid_inputs(cell) == [1, 2]

def test_ValidateEmptyCellsFullBoard():
    board = [["5","3","4","6","7","8","9","1","2"],
             ["6","7","2","1","9","5","3","4","8"],
             ["1","9","8","3","4","2","5","6","7"],
             ["8","5","9","7","6","1","4","2","3"],
             ["4","2","6","8","5","3","7","9","1"],
             ["7","1","3","9","2","4","8","5","6"],
             ["9","6","1","5","3","7","2","8","4"],
             ["2","8","7","4","1","9","6","3","5"],
             ["3","4","5","2","8","6","1","7","5"]]
    solver = SudokuSolver(board)
    assert solver.find_empty_cells() == []

def test_ValidateEmptyCellsOneBlank():
    board = [["5",".","4","6","7","8","9","1","2"],
             ["6","7","2","1","9","5","3","4","8"],
             ["1","9","8","3","4","2","5","6","7"],
             ["8","5","9","7","6","1","4","2","3"],
             ["4","2","6","8","5","3","7","9","1"],
             ["7","1","3","9","2","4","8","5","6"],
             ["9","6","1","5","3","7","2","8","4"],
             ["2","8","7","4","1","9","6","3","5"],
             ["3","4","5","2","8","6","1","7","5"]]
    solver = SudokuSolver(board)
    assert solver.find_empty_cells() == [tuple([0, 1])]

def test_ValidateEmptyCellsFewBlanks():
    board = [["5",".","4","6","7","8","9","1","."],
             ["6","7","2","1","9","5","3","4","8"],
             ["1","9","8","3","4","2","5","6","7"],
             ["8","5","9","7","6","1","4","2","3"],
             ["4","2","6","8","5","3","7","9","1"],
             ["7","1","3","9","2","4","8","5","6"],
             ["9","6","1","5","3","7","2","8","4"],
             ["2","8","7","4","1","9","6","3","5"],
             ["3","4",".","2","8","6","1","7","."]]
    solver = SudokuSolver(board)
    assert solver.find_empty_cells() == [tuple([0, 1]), tuple([0, 8]), tuple([8, 2]), tuple([8, 8])]

def test_ValidateFill():
    board = [["5",".","4","6","7","8","9","1","."],
             ["6","7","2","1","9","5","3","4","8"],
             ["1","9","8","3","4","2","5","6","7"],
             ["8","5","9","7","6","1","4","2","3"],
             ["4","2","6","8","5","3","7","9","1"],
             ["7","1","3","9","2","4","8","5","6"],
             ["9","6","1","5","3","7","2","8","4"],
             ["2","8","7","4","1","9","6","3","5"],
             ["3","4",".","2","8","6","1","7","."]]
    solver = SudokuSolver(board)
    solver.backtrack()
    solved = [["5","3","4","6","7","8","9","1","2"],
              ["6","7","2","1","9","5","3","4","8"],
              ["1","9","8","3","4","2","5","6","7"],
              ["8","5","9","7","6","1","4","2","3"],
              ["4","2","6","8","5","3","7","9","1"],
              ["7","1","3","9","2","4","8","5","6"],
              ["9","6","1","5","3","7","2","8","4"],
              ["2","8","7","4","1","9","6","3","5"],
              ["3","4","5","2","8","6","1","7","9"]]
    assert solver.stringify_board() == solved

def test_ValidateFillBig():
    board = [["5","3",".",".","7",".",".",".","."],
             ["6",".",".","1","9","5",".",".","."],
             [".","9","8",".",".",".",".","6","."],
             ["8",".",".",".","6",".",".",".","3"],
             ["4",".",".","8",".","3",".",".","1"],
             ["7",".",".",".","2",".",".",".","6"],
             [".","6",".",".",".",".","2","8","."],
             [".",".",".","4","1","9",".",".","5"],
             [".",".",".",".","8",".",".","7","9"]]
    solver = SudokuSolver(board)
    solver.backtrack()
    solved = [["5","3","4","6","7","8","9","1","2"],
              ["6","7","2","1","9","5","3","4","8"],
              ["1","9","8","3","4","2","5","6","7"],
              ["8","5","9","7","6","1","4","2","3"],
              ["4","2","6","8","5","3","7","9","1"],
              ["7","1","3","9","2","4","8","5","6"],
              ["9","6","1","5","3","7","2","8","4"],
              ["2","8","7","4","1","9","6","3","5"],
              ["3","4","5","2","8","6","1","7","9"]]
    a = solver.stringify_board()
    b = solved
    c = SudokuBoard.check_win(a)
    assert solver.stringify_board() == solved

